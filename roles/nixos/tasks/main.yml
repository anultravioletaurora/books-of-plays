- name: "Include Git repo updates (as needed)"
  ansible.builtin.include_tasks: git.yml

- name: "🗑️ Collect Nix garbage before starting"
  become: true
  ansible.builtin.shell:
    cmd: "nix-collect-garbage"

- name: "📺 Set Nix channel to {{ os_version.unstable }} (if deck enabled)"
  become: true
  ansible.builtin.shell: 
    cmd: "nix-channel --add https://channels.nixos.org/nixos-{{ os_version.unstable}} nixos"
  when: deck.enabled

- name: "📺 Set Nix channel to {{ os_version.stable }} (if desktop only)"
  become: true
  ansible.builtin.shell: 
    cmd: "nix-channel --add https://channels.nixos.org/nixos-{{ os_version.stable }} nixos"
  when: not deck.enabled
  
- name: "📺 Update Nix Channels"
  become: true
  ansible.builtin.shell:
    cmd: "nix-channel --update" 

- name: "📝 Apply templates"
  become: true
  template:
    src: "{{ configuration.src }}"
    dest: "/etc/nixos/{{ configuration.path | splitext | first }}"
  with_community.general.filetree: "{{ playbook_dir }}/templates/nixos_configuration"
  loop_control:
    loop_var: configuration
  when: configuration.state == 'file' and configuration.path.endswith(".j2")

- name: "🛠️ Run Rebuild {{ (upgrade | default(false)) | ternary('and Upgrade', '') }}"
  become: true
  ansible.builtin.shell: 
    cmd: "nixos-rebuild switch {{ (upgrade | default(false)) | ternary('--upgrade', '') }}"
  register: rebuild_result
  ignore_errors: true
  
- name: "☑️ Output Rebuild Result"
  ansible.builtin.debug:
    msg: "Rebuild result: {{ rebuild_result }}"  
