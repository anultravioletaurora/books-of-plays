- name: "Include Debug tasks"
  ansible.builtin.include_tasks: debug.yml

- name: "Include Git repo updates (as needed)"
  ansible.builtin.include_tasks: git.yml
  
- name: "Backup current configuration"
  ansible.builtin.include_tasks: backup.yml 

- name: "🗑️ Collect Nix garbage before starting"
  become: true
  ansible.builtin.shell:
    cmd: "nix-collect-garbage"

- name: "📺 Set Nix channel to {{ os_version.unstable }} (if deck enabled)"
  become: true
  ansible.builtin.shell: 
    cmd: "nix-channel --add https://channels.nixos.org/nixos-{{ os_version.unstable }} nixos"
  when: system.unstable

- name: "📺 Set Nix channel to {{ os_version.stable }} (if desktop only)"
  become: true
  ansible.builtin.shell: 
    cmd: "nix-channel --add https://channels.nixos.org/nixos-{{ os_version.stable }} nixos"
  when: not system.unstable
  
- name: "📺 Update Nix Channels"
  become: true
  ansible.builtin.shell:
    cmd: "nix-channel --update" 

- name: "Cache configuration for rollback if needed"
  include_tasks: find_and_cache_configuration.yml

- name: "📝 Apply templates"
  become: true
  template:
    src: "{{ configuration.src }}"
    dest: "{{ configuration_dir }}/{{ configuration.path | splitext | first }}"
  with_community.general.filetree: "{{ playbook_dir }}/templates/nixos_configuration"
  loop_control:
    loop_var: configuration
  when: configuration.state == 'file' and configuration.path.endswith(".j2")
  
- name: "🛠️ Run Rebuild {{ (upgrade | default(false)) | ternary('and Upgrade', '') }}"
  block:
  - name: "nixos-rebuild switch"
    become: true
    ansible.builtin.shell: 
      cmd: "nixos-rebuild switch {{ (upgrade | default(false)) | ternary('--upgrade', '') }}"
    register: rebuild_result
  
  rescue:
    - name: "Rollback configuration files"
      ansible.builtin.copy:
        src: "{{ configuration_cache_dir }}/"
        dest: "{{ configuration_dir }}/"
        remote_src: true
  
  always:
  - name: "☑️ Output Rebuild Result"
    ansible.builtin.debug:
      msg: "Rebuild result: {{ rebuild_result }}"

  - name: "Delete cached configuration"
    ansible.builtin.file:
      path: "{{ configuration_cache_dir }}"
      state: absent
