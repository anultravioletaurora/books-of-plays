- name: "Include Git repo updates (as needed)"
  ansible.builtin.include_tasks: git.yml
  
- name: "Backup current configuration"
  ansible.builtin.include_tasks: backup.yml 

- name: "üóëÔ∏è Collect Nix garbage before starting"
  become: true
  ansible.builtin.shell:
    cmd: "nix-collect-garbage {{ (delete_old_generations | default(false)) | '--delete-old' }}"

- name: "Set and update channels (as needed)"
  ansible.builtin.include_tasks: set_and_update_channels.yml

- name: "Cache configuration for rollback if needed"
  ansible.builtin.include_tasks: find_and_cache_configuration.yml

- name: "Create formatted package lists for device types"
  ansible.builtin.include_tasks: create_pkg_list.yml

- name: "üìù Apply templates"
  become: true
  template:
    src: "{{ configuration.src }}"
    dest: "{{ configuration_dir }}/{{ configuration.path | splitext | first }}"
  with_community.general.filetree: "{{ playbook_dir }}/templates/nixos_configuration"
  loop_control:
    loop_var: configuration
  when: configuration.state == 'file' and configuration.path.endswith(".j2")
  
- name: "üõ†Ô∏è Run Rebuild {{ (upgrade | default(false)) | ternary('and Upgrade', '') }}"
  block:
  - name: "nixos-rebuild switch"
    become: true
    ansible.builtin.shell: 
      cmd: "nixos-rebuild switch {{ (upgrade | default(false)) | ternary('--upgrade', '') }}"
    register: rebuild_result
  
  rescue:
    - name: "Rollback configuration files"
      become: true
      ansible.builtin.copy:
        src: "{{ configuration_cache_dir }}/"
        dest: "{{ configuration_dir }}/"
        remote_src: true
  
  always:
  - name: "Delete cached configuration"
    become: true
    ansible.builtin.file:
      path: "{{ configuration_cache_dir }}"
      state: absent
